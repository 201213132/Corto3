/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code 
{:
        
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
  
:} 


//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal mas,menos,por,div,parizq,parder;
terminal String COMA,PTCOMA,PARIZQ,PARDER,llaveizq,llaveder,dospuntos,CORIZQ,CORDER;
terminal String CONCAT;
terminal String RTRUE,RFALSE;
terminal String MENQUE,MAYQUE,MENIGUALQUE,MAYIGUALQUE,DIFQUE,IGUALQUE;
terminal String RNOT,ROR,RAND;
terminal String ENTERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String RPRINT;
terminal String RDECLARE;
terminal String RNUMBER,RSTRING,RBOOLEAN;
terminal String IGUAL;
terminal String IDENTIFICADOR;
terminal String RIF,RELSEIF,RELSE,RWHILE,RDO,RFOR,RFUNCTION,RVOID,RRETURN,RBREAK;
terminal String pr_switch,pr_case;
terminal String entero;

//------> declaracion de no terminales
non terminal String INICIO,E;
non terminal ArrayList<Object> L_CASE;
non terminal ArrayList<Object> LISTA_INSTRUCCIONES;
non terminal Object INSTRUCCION;
non terminal Object SWITCH;
non terminal Object CASE;

//----> precedencia de menor a mayor 
precedence left mas, menos;
precedence left por, div;

start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
INICIO::=SWITCH:a {: System.out.println(a); :};

LISTA_INSTRUCCIONES ::= SWITCH:a {: RESULT=a; :} 
    | E ;

SWITCH ::= pr_switch parizq E:a parder llaveizq L_CASE:b llaveder {:  :};


L_CASE ::= L_CASE:a CASE:b  {: RESULT=a; RESULT.add(b); :}
    | CASE:a                {: RESULT=new ArrayList<Object>(); RESULT.add(a); :} ;

CASE ::= pr_case E:a dospuntos LISTA_INSTRUCCIONES:b {:  :} ;

E::= E:a mas E:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1+val2;
                    RESULT = String.valueOf(r); :}
    |E:a menos E:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1-val2;
                    RESULT = String.valueOf(r); :}
    |E:a div E:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1/val2;
                    RESULT = String.valueOf(r); :}
    |E:a por E:b {: int val1= Integer.parseInt(a);
                    int val2= Integer.parseInt(b);
                    int r = val1*val2;
                    RESULT = String.valueOf(r); :}
    |parizq E:a {: RESULT = a; :} parder
    |entero:a {: RESULT = a; :};